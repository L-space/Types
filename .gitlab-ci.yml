image: registry.gitlab.com/thijsbroersen/sbt-with-docker-and-npm:latest

# DinD service is required for Testcontainers and sbt docker:publish
services:
  - docker:20.10.5-dind

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  SBT_OPTS: "-Dsbt.global.base=sbt-cache/.sbtboot -Dsbt.boot.directory=sbt-cache/boot -Dsbt.ivy.home=sbt-cache/.ivy -Dsbt.coursier.home=sbt-cache/.coursier"
  SBT_CACHE_DIR: "sbt-cache/.ivy/cache"
  COURSIER_CACHE: "sbt-cache/coursier" #only needed if you use coursier
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: "tcp://docker:2375"
  # Improve performance with overlayfs.
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CACHE_FALLBACK_KEY: master

cache: &global_cache
  key: "$CI_COMMIT_REF_SLUG"
  untracked: true
  paths:
    - "sbt-cache/.ivy/cache"
    - "sbt-cache/boot"
    - "sbt-cache/.sbtboot"
    - "sbt-cache/.coursier"
    - "target"
    - "**/target"
    - "project/target"

stages:
  - build
  - test
  - coverage
  - semantic-release
  - release

types:build:
  stage: build
  script:
    - sbt clean compile test:compile
  only:
    changes:
      - build.sbt
      - project/*
      - types/**/*
  except:
    - tags

types:test:
  stage: test
  needs: ["types:build"]
  script:
    - sbt test
  only:
    changes:
      - build.sbt
      - project/*
      - types/**/*
  except:
    - tags
  cache:
    <<: *global_cache
    # override the policy
    policy: pull
  artifacts:
    when: always
    reports:
      junit:
        - types/**/TEST*.xml

types:coverage:
  stage: coverage
  needs: ["types:test"]
  script:
    - sbt clean coverage test coverageReport
  only:
    refs:
      - merge_requests
  cache:
    <<: *global_cache
    # override the policy
    policy: pull
  artifacts:
    when: always
    reports:
      cobertura:
        - types/**/coverage-report/cobertura.xml

#include:
#  - template: Code-Quality.gitlab-ci.yml
#
#code_quality:
#  rules:
#    - if: '$CODE_QUALITY_DISABLED'
#      when: never
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run code quality job in merge request pipelines
#    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'      # Run code quality job in pipelines on the master branch (but not in other branch pipelines)
#  #    - if: '$CI_COMMIT_TAG'                               # Run code quality job in pipelines for tags
#  cache: {}

semantic-release:
  image: registry.gitlab.com/thijsbroersen/semantic-release-git:latest
  stage: semantic-release
  before_script:
    - echo $SONATYPE_USERNAME
    - echo "$SONATYPE_USERNAME"
    #@semantic-release/gitlab
    - echo "$SSH_LSPACE_PRIVATE_KEY" > /tmp/git_deploy_key
    # Make sure only the current user can read the private key
    - chmod 600 /tmp/git_deploy_key
    # Create a script to return the passphrase environment variable to ssh-add
    - git config core.sshCommand "ssh -i /tmp/git_deploy_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -F /dev/null"
  script:
    - semantic-release
  only:
    - master
  cache: {}

release-packages:
  stage: release
  before_script:
    - echo $SONATYPE_USERNAME
    - echo "$SONATYPE_USERNAME"
    - echo $PGP_SECRET | base64 --decode | gpg --batch --import
  script:
    - sbt aetherDeploy ci-release
  only:
    - tags
  cache:
    <<: *global_cache
    # override the policy
    policy: pull
